<?php
namespace Teeparty\Task;

use Teeparty\Task;

class Factory {

    /**
     * Create a new task.
     * 
     * @param string $worker worker class.
     * @param array $context context to run worker in.
     * @param string $id task id.
     *
     * @return Task A new Task.
     */
    public static function create($worker, array $context = array(), $id = null)
    {
        if (!($worker instanceof Worker)) {
            if (!class_exists($worker)) {
                throw new Exception('unknown class: ' . $worker);
            }

            $w = new $worker;
        } else {
            $w = $worker;
        }

        if (!$w instanceof Worker) {
            throw new Exception($worker.' must implement \Teeparty\Task\Worker');
        }
        
        $c = new Context($context);
        return new Task($w, $c, $id);
    }


    /**
     * Create a new task from the given array.
     *
     * The following keys are available:
     *
     *  - worker: The className of the worker.
     *  - context [optional]: key-value dict with worker arguments (empty 
     *                        by default).
     *  - id [optional]: task id to use (auto-generated by default).
     *
     * @param array $data task information.
     * @return Task A new task.
     */
    public static function createFromArray(array $data)
    {
        $task = self::create(
            $data['worker'], 
            (array) (isset($data['context']) && is_array($data['context']) 
                ? $data['context'] 
                : array()
            ),
            isset($data['id']) ? $data['id'] : ''
        );
        
        return $task;
    }


    public static function createFromMessage($msg)
    {
        return self::createFromArray((array) $msg);
    }
}
